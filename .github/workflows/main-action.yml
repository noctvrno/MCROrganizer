name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: MCROrganizer.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload.
    - name: Install .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    
    # Setup NuGet.exe.
    - name: Setup NuGet.exe
      uses: NuGet/setup-nuget@v1.0.6

    # Add  MSBuild to the PATH.
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
      
    # Restore NuGet Packages.
    - name: restore-nuget-packages
      uses: IT-Service/restore-nuget-packages@v1

    # Restore the application to populate the obj folder with RuntimeIdentifiers.
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project.
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Upload the MSIX package.
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
